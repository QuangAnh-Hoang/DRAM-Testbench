/*
 * Generated by Bluespec Compiler (build e4c11968)
 * 
 * On Wed Sep  4 18:43:50 PDT 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkDRAM_Bank.h"


/* Literal declarations */
static unsigned int const UWide_literal_252_h0_arr[] = { 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u };
static tUWide const UWide_literal_252_h0(252u, UWide_literal_252_h0_arr);
static unsigned int const UWide_literal_256_hf_arr[] = { 15u, 0u, 0u, 0u, 0u, 0u, 0u, 0u };
static tUWide const UWide_literal_256_hf(256u, UWide_literal_256_hf_arr);
static unsigned int const UWide_literal_256_h0_arr[] = { 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u };
static tUWide const UWide_literal_256_h0(256u, UWide_literal_256_h0_arr);


/* String declarations */
static std::string const __str_literal_1("mem_0.txt", 9u);


/* Constructor */
MOD_mkDRAM_Bank::MOD_mkDRAM_Bank(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_activeRowAddr(simHdl, "activeRowAddr", this, 14u, 0u, (tUInt8)0u),
    INST_addrQ(simHdl, "addrQ", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_burstCounter(simHdl, "burstCounter", this, 14u, 0u, (tUInt8)0u),
    INST_cmdQ(simHdl, "cmdQ", this, 4u, 2u, (tUInt8)1u, 0u),
    INST_currAddress(simHdl, "currAddress", this, 14u, 0u, (tUInt8)0u),
    INST_currColAddr(simHdl, "currColAddr", this, 14u, 0u, (tUInt8)0u),
    INST_currCommand(simHdl, "currCommand", this, 4u, (tUInt8)15u, (tUInt8)0u),
    INST_currState(simHdl, "currState", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_dataQ(simHdl, "dataQ", this, 4u, 2u, (tUInt8)1u, 0u),
    INST_mem_cells_mem_bank(simHdl,
			    "mem_cells_mem_bank",
			    this,
			    __str_literal_1,
			    (tUInt8)0u,
			    14u,
			    256u,
			    16384u,
			    (tUInt8)0u,
			    2u),
    INST_outputDataBuff(simHdl, "outputDataBuff", this, 4u, 4u, (tUInt8)1u, 0u),
    INST_rowBuffer(simHdl, "rowBuffer", this, 256u, UWide_literal_256_h0, (tUInt8)0u),
    INST_rowMask(simHdl, "rowMask", this, 256u, UWide_literal_256_h0, (tUInt8)0u),
    INST_stallCounter(simHdl, "stallCounter", this, 14u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_d__h1665(256u),
    DEF_rowMask__h47581(256u),
    DEF_x__h1938(256u),
    DEF_rowMask_3_BITS_251_TO_0___d88(252u),
    DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58(256u),
    DEF_x__h1885(256u),
    DEF_y__h1939(256u),
    DEF_x__h1525(256u),
    DEF_rep_d__h1875(256u),
    DEF__0_CONCAT_dataQ_first__6___d47(256u),
    DEF_x__h1904(256u),
    DEF_y__h1905(256u),
    DEF_x__h1954(256u)
{
  symbol_count = 23u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDRAM_Bank::init_symbols_0()
{
  init_symbol(&symbols[0u], "activeRowAddr", SYM_MODULE, &INST_activeRowAddr);
  init_symbol(&symbols[1u], "addrQ", SYM_MODULE, &INST_addrQ);
  init_symbol(&symbols[2u], "burstCounter", SYM_MODULE, &INST_burstCounter);
  init_symbol(&symbols[3u], "cmdQ", SYM_MODULE, &INST_cmdQ);
  init_symbol(&symbols[4u], "currAddress", SYM_MODULE, &INST_currAddress);
  init_symbol(&symbols[5u], "currColAddr", SYM_MODULE, &INST_currColAddr);
  init_symbol(&symbols[6u], "currCommand", SYM_MODULE, &INST_currCommand);
  init_symbol(&symbols[7u], "currState", SYM_MODULE, &INST_currState);
  init_symbol(&symbols[8u], "currState__h1663", SYM_DEF, &DEF_currState__h1663, 3u);
  init_symbol(&symbols[9u], "dataQ", SYM_MODULE, &INST_dataQ);
  init_symbol(&symbols[10u], "mem_cells_mem_bank", SYM_MODULE, &INST_mem_cells_mem_bank);
  init_symbol(&symbols[11u], "outputDataBuff", SYM_MODULE, &INST_outputDataBuff);
  init_symbol(&symbols[12u], "RL_fetch", SYM_RULE);
  init_symbol(&symbols[13u], "RL_process_ACT", SYM_RULE);
  init_symbol(&symbols[14u], "RL_process_NOP", SYM_RULE);
  init_symbol(&symbols[15u], "RL_process_PRE", SYM_RULE);
  init_symbol(&symbols[16u], "RL_process_RD", SYM_RULE);
  init_symbol(&symbols[17u], "RL_process_WR", SYM_RULE);
  init_symbol(&symbols[18u], "rowBuffer", SYM_MODULE, &INST_rowBuffer);
  init_symbol(&symbols[19u], "rowMask", SYM_MODULE, &INST_rowMask);
  init_symbol(&symbols[20u], "stallCounter", SYM_MODULE, &INST_stallCounter);
  init_symbol(&symbols[21u], "x__h1650", SYM_DEF, &DEF_x__h1650, 14u);
  init_symbol(&symbols[22u], "x__h47591", SYM_DEF, &DEF_x__h47591, 14u);
}


/* Rule actions */

void MOD_mkDRAM_Bank::RL_fetch()
{
  tUInt8 DEF_cmdQ_first____d11;
  tUInt32 DEF_x__h932;
  DEF_x__h932 = INST_addrQ.METH_first();
  DEF_cmdQ_first____d11 = INST_cmdQ.METH_first();
  INST_cmdQ.METH_deq();
  INST_addrQ.METH_deq();
  INST_currCommand.METH_write(DEF_cmdQ_first____d11);
  INST_currAddress.METH_write(DEF_x__h932);
}

void MOD_mkDRAM_Bank::RL_process_ACT()
{
  DEF_x__h1499 = INST_currAddress.METH_read();
  INST_stallCounter.METH_write(1u);
  INST_currCommand.METH_write((tUInt8)15u);
  INST_currState.METH_write((tUInt8)1u);
  INST_mem_cells_mem_bank.METH_b_put((tUInt8)0u, DEF_x__h1499, UWide_literal_256_h0);
  INST_activeRowAddr.METH_write(DEF_x__h1499);
}

void MOD_mkDRAM_Bank::RL_process_PRE()
{
  DEF_x__h1938 = INST_rowBuffer.METH_read();
  DEF_addr__h1199 = INST_activeRowAddr.METH_read();
  INST_stallCounter.METH_write(1u);
  INST_currCommand.METH_write((tUInt8)15u);
  INST_currState.METH_write((tUInt8)5u);
  INST_mem_cells_mem_bank.METH_a_put((tUInt8)1u, DEF_addr__h1199, DEF_x__h1938);
}

void MOD_mkDRAM_Bank::RL_process_RD()
{
  DEF_x__h1499 = INST_currAddress.METH_read();
  INST_stallCounter.METH_write(4u);
  INST_currCommand.METH_write((tUInt8)15u);
  INST_currState.METH_write((tUInt8)3u);
  INST_currColAddr.METH_write(DEF_x__h1499);
  INST_burstCounter.METH_write(0u);
}

void MOD_mkDRAM_Bank::RL_process_WR()
{
  tUInt32 DEF_s__h1524;
  tUInt32 DEF_currAddress_BITS_11_TO_0___h1560;
  DEF_x__h1499 = INST_currAddress.METH_read();
  DEF_currAddress_BITS_11_TO_0___h1560 = (tUInt32)(4095u & DEF_x__h1499);
  DEF_s__h1524 = 16383u & ((DEF_currAddress_BITS_11_TO_0___h1560 << 2u) | (tUInt32)((tUInt8)0u));
  wop_primShiftLWide(256u, 256u, UWide_literal_256_hf, 14u, (tUInt32)(DEF_s__h1524), DEF_x__h1525);
  INST_stallCounter.METH_write(4u);
  INST_currCommand.METH_write((tUInt8)15u);
  INST_currState.METH_write((tUInt8)4u);
  INST_burstCounter.METH_write(0u);
  INST_currColAddr.METH_write(DEF_x__h1499);
  INST_rowMask.METH_write(DEF_x__h1525);
}

void MOD_mkDRAM_Bank::RL_process_NOP()
{
  tUInt32 DEF_x__h47587;
  tUInt32 DEF_x__h1616;
  tUInt32 DEF_x__h1811;
  tUInt32 DEF_offset__h1682;
  tUInt8 DEF_NOT_stallCounter_EQ_0___d41;
  tUInt8 DEF_currState_4_EQ_3_6_AND_burstCounter_7_ULT_4_8___d81;
  tUInt8 DEF_NOT_currState_4_EQ_1_5_7_AND_currState_4_EQ_3__ETC___d79;
  tUInt8 DEF_currState_4_EQ_4_2_AND_burstCounter_7_ULT_4_8___d43;
  tUInt8 DEF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_AND_N_ETC___d71;
  tUInt8 DEF_IF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_OR_ETC___d76;
  tUInt8 DEF_d__h1683;
  tUInt32 DEF_i1__h1786;
  tUInt32 DEF_currColAddr_8_PLUS_burstCounter_7___d49;
  tUInt8 DEF_d__h1874;
  tUInt32 DEF__read__h500;
  tUInt8 DEF_currState_4_EQ_1_5_OR_currState_4_EQ_4_2_AND_b_ETC___d44;
  DEF_currState__h1663 = INST_currState.METH_read();
  DEF_d__h1665 = INST_mem_cells_mem_bank.METH_b_read();
  DEF_rowMask__h47581 = INST_rowMask.METH_read();
  DEF_x__h1938 = INST_rowBuffer.METH_read();
  DEF_x__h47591 = INST_burstCounter.METH_read();
  DEF_burstCounter_7_ULT_4___d28 = DEF_x__h47591 < 4u;
  DEF_x__h1650 = INST_stallCounter.METH_read();
  DEF__read__h500 = INST_currColAddr.METH_read();
  DEF_d__h1874 = INST_dataQ.METH_first();
  wop_primExtractWide(252u,
		      256u,
		      DEF_rowMask__h47581,
		      32u,
		      251u,
		      32u,
		      0u,
		      DEF_rowMask_3_BITS_251_TO_0___d88);
  DEF_currColAddr_8_PLUS_burstCounter_7___d49 = 16383u & (DEF__read__h500 + DEF_x__h47591);
  DEF_currState_4_EQ_1___d25 = DEF_currState__h1663 == (tUInt8)1u;
  switch (DEF_currState__h1663) {
  case (tUInt8)1u:
  case (tUInt8)3u:
  case (tUInt8)4u:
    DEF_IF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_OR_ETC___d76 = (tUInt8)2u;
    break;
  case (tUInt8)0u:
  case (tUInt8)2u:
    DEF_IF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_OR_ETC___d76 = DEF_currState__h1663;
    break;
  default:
    DEF_IF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_OR_ETC___d76 = (tUInt8)0u;
  }
  DEF_currState_4_EQ_3___d26 = DEF_currState__h1663 == (tUInt8)3u;
  DEF_stallCounter_EQ_0___d8 = DEF_x__h1650 == 0u;
  DEF_currState_4_EQ_4___d32 = DEF_currState__h1663 == (tUInt8)4u;
  DEF_currState_4_EQ_4_2_AND_burstCounter_7_ULT_4_8___d43 = DEF_currState_4_EQ_4___d32 && DEF_burstCounter_7_ULT_4___d28;
  DEF_currState_4_EQ_1_5_OR_currState_4_EQ_4_2_AND_b_ETC___d44 = DEF_currState_4_EQ_1___d25 || DEF_currState_4_EQ_4_2_AND_burstCounter_7_ULT_4_8___d43;
  DEF_NOT_currState_4_EQ_4_2___d33 = !DEF_currState_4_EQ_4___d32;
  DEF_NOT_burstCounter_7_ULT_4_8___d29 = !DEF_burstCounter_7_ULT_4___d28;
  DEF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_AND_N_ETC___d71 = DEF_currState_4_EQ_1___d25 || ((DEF_currState_4_EQ_3___d26 && DEF_NOT_burstCounter_7_ULT_4_8___d29) || (!DEF_currState_4_EQ_3___d26 && ((DEF_currState_4_EQ_4___d32 && DEF_NOT_burstCounter_7_ULT_4_8___d29) || (DEF_NOT_currState_4_EQ_4_2___d33 && (DEF_currState__h1663 == (tUInt8)0u || (DEF_currState__h1663 == (tUInt8)2u || DEF_currState__h1663 == (tUInt8)5u))))));
  DEF_NOT_currState_4_EQ_1_5_7_AND_currState_4_EQ_3__ETC___d79 = !DEF_currState_4_EQ_1___d25 && ((DEF_currState_4_EQ_3___d26 || DEF_currState_4_EQ_4___d32) && DEF_burstCounter_7_ULT_4___d28);
  DEF_currState_4_EQ_3_6_AND_burstCounter_7_ULT_4_8___d81 = DEF_currState_4_EQ_3___d26 && DEF_burstCounter_7_ULT_4___d28;
  wop_inv(DEF_rowMask__h47581, DEF_y__h1939);
  DEF_NOT_stallCounter_EQ_0___d41 = !DEF_stallCounter_EQ_0___d8;
  DEF__0_CONCAT_dataQ_first__6___d47.set_whole_word(primExtract32(32u,
								  252u,
								  UWide_literal_252_h0,
								  32u,
								  251u,
								  32u,
								  220u),
						    7u).set_whole_word(primExtract32(32u,
										     252u,
										     UWide_literal_252_h0,
										     32u,
										     219u,
										     32u,
										     188u),
								       6u).set_whole_word(primExtract32(32u,
													252u,
													UWide_literal_252_h0,
													32u,
													187u,
													32u,
													156u),
											  5u).set_whole_word(primExtract32(32u,
															   252u,
															   UWide_literal_252_h0,
															   32u,
															   155u,
															   32u,
															   124u),
													     4u).set_whole_word(primExtract32(32u,
																	      252u,
																	      UWide_literal_252_h0,
																	      32u,
																	      123u,
																	      32u,
																	      92u),
																3u).set_whole_word(primExtract32(32u,
																				 252u,
																				 UWide_literal_252_h0,
																				 32u,
																				 91u,
																				 32u,
																				 60u),
																		   2u).set_whole_word(primExtract32(32u,
																						    252u,
																						    UWide_literal_252_h0,
																						    32u,
																						    59u,
																						    32u,
																						    28u),
																				      1u).set_whole_word((UWide_literal_252_h0.get_bits_in_word32(0u,
																												  0u,
																												  28u) << 4u) | (tUInt32)(DEF_d__h1874),
																							 0u);
  DEF_offset__h1682 = 16383u & ((((tUInt32)(4095u & DEF_currColAddr_8_PLUS_burstCounter_7___d49)) << 2u) | (tUInt32)((tUInt8)0u));
  wop_primShiftLWide(256u,
		     256u,
		     DEF__0_CONCAT_dataQ_first__6___d47,
		     14u,
		     (tUInt32)(DEF_offset__h1682),
		     DEF_rep_d__h1875);
  wop_and(DEF_rep_d__h1875, DEF_rowMask__h47581, DEF_x__h1904);
  wop_and(DEF_x__h1938, DEF_y__h1939, DEF_y__h1905);
  wop_or(DEF_x__h1904, DEF_y__h1905, DEF_x__h1885);
  DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58 = DEF_currState_4_EQ_1___d25 ? DEF_d__h1665 : DEF_x__h1885;
  DEF_x__h1811 = 16383u & (DEF_offset__h1682 + 4u);
  DEF_i1__h1786 = 16383u & (DEF_x__h1811 - 1u);
  DEF_d__h1683 = primExtract8(4u,
			      256u,
			      DEF_x__h1938,
			      8u,
			      (tUInt8)((tUInt8)((tUInt8)255u & DEF_i1__h1786)),
			      8u,
			      (tUInt8)((tUInt8)255u & (((tUInt8)((tUInt8)63u & DEF_currColAddr_8_PLUS_burstCounter_7___d49)) << 2u)));
  DEF_x__h1616 = 16383u & (DEF_x__h1650 - 1u);
  DEF_x__h47587 = 16383u & (DEF_x__h47591 + 1u);
  DEF_x__h1954.set_whole_word(primExtract32(32u,
					    252u,
					    DEF_rowMask_3_BITS_251_TO_0___d88,
					    32u,
					    251u,
					    32u,
					    220u),
			      7u).set_whole_word(primExtract32(32u,
							       252u,
							       DEF_rowMask_3_BITS_251_TO_0___d88,
							       32u,
							       219u,
							       32u,
							       188u),
						 6u).set_whole_word(primExtract32(32u,
										  252u,
										  DEF_rowMask_3_BITS_251_TO_0___d88,
										  32u,
										  187u,
										  32u,
										  156u),
								    5u).set_whole_word(primExtract32(32u,
												     252u,
												     DEF_rowMask_3_BITS_251_TO_0___d88,
												     32u,
												     155u,
												     32u,
												     124u),
										       4u).set_whole_word(primExtract32(32u,
															252u,
															DEF_rowMask_3_BITS_251_TO_0___d88,
															32u,
															123u,
															32u,
															92u),
													  3u).set_whole_word(primExtract32(32u,
																	   252u,
																	   DEF_rowMask_3_BITS_251_TO_0___d88,
																	   32u,
																	   91u,
																	   32u,
																	   60u),
															     2u).set_whole_word(primExtract32(32u,
																			      252u,
																			      DEF_rowMask_3_BITS_251_TO_0___d88,
																			      32u,
																			      59u,
																			      32u,
																			      28u),
																		1u).set_whole_word((DEF_rowMask_3_BITS_251_TO_0___d88.get_bits_in_word32(0u,
																											 0u,
																											 28u) << 4u) | (tUInt32)(DEF_rowMask__h47581.get_bits_in_word8(7u,
																																		       28u,
																																		       4u)),
																				   0u);
  if (DEF_NOT_stallCounter_EQ_0___d41)
    INST_stallCounter.METH_write(DEF_x__h1616);
  if (DEF_currState_4_EQ_1_5_OR_currState_4_EQ_4_2_AND_b_ETC___d44)
    INST_rowBuffer.METH_write(DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58);
  if (DEF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_AND_N_ETC___d71)
    INST_currState.METH_write(DEF_IF_currState_4_EQ_1_5_OR_currState_4_EQ_3_6_OR_ETC___d76);
  if (DEF_NOT_currState_4_EQ_1_5_7_AND_currState_4_EQ_3__ETC___d79)
    INST_burstCounter.METH_write(DEF_x__h47587);
  if (DEF_currState_4_EQ_3_6_AND_burstCounter_7_ULT_4_8___d81)
    INST_outputDataBuff.METH_enq(DEF_d__h1683);
  if (DEF_currState_4_EQ_4_2_AND_burstCounter_7_ULT_4_8___d43)
    INST_dataQ.METH_deq();
  if (DEF_currState_4_EQ_4_2_AND_burstCounter_7_ULT_4_8___d43)
    INST_rowMask.METH_write(DEF_x__h1954);
}


/* Methods */

void MOD_mkDRAM_Bank::METH_put_bank_cmd(tUInt8 ARG_put_bank_cmd_cmd, tUInt32 ARG_put_bank_cmd_addr)
{
  INST_cmdQ.METH_enq(ARG_put_bank_cmd_cmd);
  INST_addrQ.METH_enq(ARG_put_bank_cmd_addr);
}

tUInt8 MOD_mkDRAM_Bank::METH_RDY_put_bank_cmd()
{
  tUInt8 PORT_RDY_put_bank_cmd;
  tUInt8 DEF_CAN_FIRE_put_bank_cmd;
  DEF_CAN_FIRE_put_bank_cmd = INST_cmdQ.METH_i_notFull() && INST_addrQ.METH_i_notFull();
  PORT_RDY_put_bank_cmd = DEF_CAN_FIRE_put_bank_cmd;
  return PORT_RDY_put_bank_cmd;
}

void MOD_mkDRAM_Bank::METH_put_bank_data(tUInt8 ARG_put_bank_data_data)
{
  INST_dataQ.METH_enq(ARG_put_bank_data_data);
}

tUInt8 MOD_mkDRAM_Bank::METH_RDY_put_bank_data()
{
  tUInt8 PORT_RDY_put_bank_data;
  tUInt8 DEF_CAN_FIRE_put_bank_data;
  DEF_CAN_FIRE_put_bank_data = INST_dataQ.METH_i_notFull();
  PORT_RDY_put_bank_data = DEF_CAN_FIRE_put_bank_data;
  return PORT_RDY_put_bank_data;
}

tUInt8 MOD_mkDRAM_Bank::METH_data_response_ready()
{
  tUInt8 PORT_data_response_ready;
  PORT_data_response_ready = INST_outputDataBuff.METH_notEmpty();
  return PORT_data_response_ready;
}

tUInt8 MOD_mkDRAM_Bank::METH_RDY_data_response_ready()
{
  tUInt8 PORT_RDY_data_response_ready;
  tUInt8 DEF_CAN_FIRE_data_response_ready;
  DEF_CAN_FIRE_data_response_ready = (tUInt8)1u;
  PORT_RDY_data_response_ready = DEF_CAN_FIRE_data_response_ready;
  return PORT_RDY_data_response_ready;
}

tUInt8 MOD_mkDRAM_Bank::METH_get_data_response()
{
  tUInt8 DEF_get_data_response__avValue1;
  tUInt8 PORT_get_data_response;
  DEF_get_data_response__avValue1 = INST_outputDataBuff.METH_first();
  PORT_get_data_response = DEF_get_data_response__avValue1;
  INST_outputDataBuff.METH_deq();
  return PORT_get_data_response;
}

tUInt8 MOD_mkDRAM_Bank::METH_RDY_get_data_response()
{
  tUInt8 PORT_RDY_get_data_response;
  tUInt8 DEF_CAN_FIRE_get_data_response;
  DEF_CAN_FIRE_get_data_response = INST_outputDataBuff.METH_i_notEmpty();
  PORT_RDY_get_data_response = DEF_CAN_FIRE_get_data_response;
  return PORT_RDY_get_data_response;
}

tUInt32 MOD_mkDRAM_Bank::METH_get_active_row()
{
  tUInt32 PORT_get_active_row;
  DEF_addr__h1199 = INST_activeRowAddr.METH_read();
  PORT_get_active_row = DEF_addr__h1199;
  return PORT_get_active_row;
}

tUInt8 MOD_mkDRAM_Bank::METH_RDY_get_active_row()
{
  tUInt8 PORT_RDY_get_active_row;
  tUInt8 DEF_CAN_FIRE_get_active_row;
  DEF_CAN_FIRE_get_active_row = (tUInt8)1u;
  PORT_RDY_get_active_row = DEF_CAN_FIRE_get_active_row;
  return PORT_RDY_get_active_row;
}


/* Reset routines */

void MOD_mkDRAM_Bank::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_stallCounter.reset_RST(ARG_rst_in);
  INST_rowMask.reset_RST(ARG_rst_in);
  INST_rowBuffer.reset_RST(ARG_rst_in);
  INST_outputDataBuff.reset_RST(ARG_rst_in);
  INST_dataQ.reset_RST(ARG_rst_in);
  INST_currState.reset_RST(ARG_rst_in);
  INST_currCommand.reset_RST(ARG_rst_in);
  INST_currColAddr.reset_RST(ARG_rst_in);
  INST_currAddress.reset_RST(ARG_rst_in);
  INST_cmdQ.reset_RST(ARG_rst_in);
  INST_burstCounter.reset_RST(ARG_rst_in);
  INST_addrQ.reset_RST(ARG_rst_in);
  INST_activeRowAddr.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDRAM_Bank::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDRAM_Bank::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_activeRowAddr.dump_state(indent + 2u);
  INST_addrQ.dump_state(indent + 2u);
  INST_burstCounter.dump_state(indent + 2u);
  INST_cmdQ.dump_state(indent + 2u);
  INST_currAddress.dump_state(indent + 2u);
  INST_currColAddr.dump_state(indent + 2u);
  INST_currCommand.dump_state(indent + 2u);
  INST_currState.dump_state(indent + 2u);
  INST_dataQ.dump_state(indent + 2u);
  INST_mem_cells_mem_bank.dump_state(indent + 2u);
  INST_outputDataBuff.dump_state(indent + 2u);
  INST_rowBuffer.dump_state(indent + 2u);
  INST_rowMask.dump_state(indent + 2u);
  INST_stallCounter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDRAM_Bank::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 40u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_burstCounter_7_ULT_4_8___d29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currState_4_EQ_4_2___d33", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_dataQ_first__6___d47", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addr__h1199", 14u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "burstCounter_7_ULT_4___d28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "currState_4_EQ_1___d25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "currState_4_EQ_3___d26", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "currState_4_EQ_4___d32", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "currState__h1663", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "d__h1665", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rep_d__h1875", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rowMask_3_BITS_251_TO_0___d88", 252u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rowMask__h47581", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "stallCounter_EQ_0___d8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1499", 14u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1525", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1650", 14u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1885", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1904", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1938", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1954", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h47591", 14u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h1905", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h1939", 256u);
  num = INST_activeRowAddr.dump_VCD_defs(num);
  num = INST_addrQ.dump_VCD_defs(num);
  num = INST_burstCounter.dump_VCD_defs(num);
  num = INST_cmdQ.dump_VCD_defs(num);
  num = INST_currAddress.dump_VCD_defs(num);
  num = INST_currColAddr.dump_VCD_defs(num);
  num = INST_currCommand.dump_VCD_defs(num);
  num = INST_currState.dump_VCD_defs(num);
  num = INST_dataQ.dump_VCD_defs(num);
  num = INST_mem_cells_mem_bank.dump_VCD_defs(num);
  num = INST_outputDataBuff.dump_VCD_defs(num);
  num = INST_rowBuffer.dump_VCD_defs(num);
  num = INST_rowMask.dump_VCD_defs(num);
  num = INST_stallCounter.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDRAM_Bank::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDRAM_Bank &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkDRAM_Bank::vcd_defs(tVCDDumpType dt, MOD_mkDRAM_Bank &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 14u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 252u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 14u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 14u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 14u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58) != DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58, 256u);
	backing.DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58 = DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58;
      }
      ++num;
      if ((backing.DEF_NOT_burstCounter_7_ULT_4_8___d29) != DEF_NOT_burstCounter_7_ULT_4_8___d29)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_burstCounter_7_ULT_4_8___d29, 1u);
	backing.DEF_NOT_burstCounter_7_ULT_4_8___d29 = DEF_NOT_burstCounter_7_ULT_4_8___d29;
      }
      ++num;
      if ((backing.DEF_NOT_currState_4_EQ_4_2___d33) != DEF_NOT_currState_4_EQ_4_2___d33)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currState_4_EQ_4_2___d33, 1u);
	backing.DEF_NOT_currState_4_EQ_4_2___d33 = DEF_NOT_currState_4_EQ_4_2___d33;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_dataQ_first__6___d47) != DEF__0_CONCAT_dataQ_first__6___d47)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_dataQ_first__6___d47, 256u);
	backing.DEF__0_CONCAT_dataQ_first__6___d47 = DEF__0_CONCAT_dataQ_first__6___d47;
      }
      ++num;
      if ((backing.DEF_addr__h1199) != DEF_addr__h1199)
      {
	vcd_write_val(sim_hdl, num, DEF_addr__h1199, 14u);
	backing.DEF_addr__h1199 = DEF_addr__h1199;
      }
      ++num;
      if ((backing.DEF_burstCounter_7_ULT_4___d28) != DEF_burstCounter_7_ULT_4___d28)
      {
	vcd_write_val(sim_hdl, num, DEF_burstCounter_7_ULT_4___d28, 1u);
	backing.DEF_burstCounter_7_ULT_4___d28 = DEF_burstCounter_7_ULT_4___d28;
      }
      ++num;
      if ((backing.DEF_currState_4_EQ_1___d25) != DEF_currState_4_EQ_1___d25)
      {
	vcd_write_val(sim_hdl, num, DEF_currState_4_EQ_1___d25, 1u);
	backing.DEF_currState_4_EQ_1___d25 = DEF_currState_4_EQ_1___d25;
      }
      ++num;
      if ((backing.DEF_currState_4_EQ_3___d26) != DEF_currState_4_EQ_3___d26)
      {
	vcd_write_val(sim_hdl, num, DEF_currState_4_EQ_3___d26, 1u);
	backing.DEF_currState_4_EQ_3___d26 = DEF_currState_4_EQ_3___d26;
      }
      ++num;
      if ((backing.DEF_currState_4_EQ_4___d32) != DEF_currState_4_EQ_4___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_currState_4_EQ_4___d32, 1u);
	backing.DEF_currState_4_EQ_4___d32 = DEF_currState_4_EQ_4___d32;
      }
      ++num;
      if ((backing.DEF_currState__h1663) != DEF_currState__h1663)
      {
	vcd_write_val(sim_hdl, num, DEF_currState__h1663, 3u);
	backing.DEF_currState__h1663 = DEF_currState__h1663;
      }
      ++num;
      if ((backing.DEF_d__h1665) != DEF_d__h1665)
      {
	vcd_write_val(sim_hdl, num, DEF_d__h1665, 256u);
	backing.DEF_d__h1665 = DEF_d__h1665;
      }
      ++num;
      if ((backing.DEF_rep_d__h1875) != DEF_rep_d__h1875)
      {
	vcd_write_val(sim_hdl, num, DEF_rep_d__h1875, 256u);
	backing.DEF_rep_d__h1875 = DEF_rep_d__h1875;
      }
      ++num;
      if ((backing.DEF_rowMask_3_BITS_251_TO_0___d88) != DEF_rowMask_3_BITS_251_TO_0___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_rowMask_3_BITS_251_TO_0___d88, 252u);
	backing.DEF_rowMask_3_BITS_251_TO_0___d88 = DEF_rowMask_3_BITS_251_TO_0___d88;
      }
      ++num;
      if ((backing.DEF_rowMask__h47581) != DEF_rowMask__h47581)
      {
	vcd_write_val(sim_hdl, num, DEF_rowMask__h47581, 256u);
	backing.DEF_rowMask__h47581 = DEF_rowMask__h47581;
      }
      ++num;
      if ((backing.DEF_stallCounter_EQ_0___d8) != DEF_stallCounter_EQ_0___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_stallCounter_EQ_0___d8, 1u);
	backing.DEF_stallCounter_EQ_0___d8 = DEF_stallCounter_EQ_0___d8;
      }
      ++num;
      if ((backing.DEF_x__h1499) != DEF_x__h1499)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1499, 14u);
	backing.DEF_x__h1499 = DEF_x__h1499;
      }
      ++num;
      if ((backing.DEF_x__h1525) != DEF_x__h1525)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1525, 256u);
	backing.DEF_x__h1525 = DEF_x__h1525;
      }
      ++num;
      if ((backing.DEF_x__h1650) != DEF_x__h1650)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1650, 14u);
	backing.DEF_x__h1650 = DEF_x__h1650;
      }
      ++num;
      if ((backing.DEF_x__h1885) != DEF_x__h1885)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1885, 256u);
	backing.DEF_x__h1885 = DEF_x__h1885;
      }
      ++num;
      if ((backing.DEF_x__h1904) != DEF_x__h1904)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1904, 256u);
	backing.DEF_x__h1904 = DEF_x__h1904;
      }
      ++num;
      if ((backing.DEF_x__h1938) != DEF_x__h1938)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1938, 256u);
	backing.DEF_x__h1938 = DEF_x__h1938;
      }
      ++num;
      if ((backing.DEF_x__h1954) != DEF_x__h1954)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1954, 256u);
	backing.DEF_x__h1954 = DEF_x__h1954;
      }
      ++num;
      if ((backing.DEF_x__h47591) != DEF_x__h47591)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h47591, 14u);
	backing.DEF_x__h47591 = DEF_x__h47591;
      }
      ++num;
      if ((backing.DEF_y__h1905) != DEF_y__h1905)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h1905, 256u);
	backing.DEF_y__h1905 = DEF_y__h1905;
      }
      ++num;
      if ((backing.DEF_y__h1939) != DEF_y__h1939)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h1939, 256u);
	backing.DEF_y__h1939 = DEF_y__h1939;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58, 256u);
      backing.DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58 = DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58;
      vcd_write_val(sim_hdl, num++, DEF_NOT_burstCounter_7_ULT_4_8___d29, 1u);
      backing.DEF_NOT_burstCounter_7_ULT_4_8___d29 = DEF_NOT_burstCounter_7_ULT_4_8___d29;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currState_4_EQ_4_2___d33, 1u);
      backing.DEF_NOT_currState_4_EQ_4_2___d33 = DEF_NOT_currState_4_EQ_4_2___d33;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_dataQ_first__6___d47, 256u);
      backing.DEF__0_CONCAT_dataQ_first__6___d47 = DEF__0_CONCAT_dataQ_first__6___d47;
      vcd_write_val(sim_hdl, num++, DEF_addr__h1199, 14u);
      backing.DEF_addr__h1199 = DEF_addr__h1199;
      vcd_write_val(sim_hdl, num++, DEF_burstCounter_7_ULT_4___d28, 1u);
      backing.DEF_burstCounter_7_ULT_4___d28 = DEF_burstCounter_7_ULT_4___d28;
      vcd_write_val(sim_hdl, num++, DEF_currState_4_EQ_1___d25, 1u);
      backing.DEF_currState_4_EQ_1___d25 = DEF_currState_4_EQ_1___d25;
      vcd_write_val(sim_hdl, num++, DEF_currState_4_EQ_3___d26, 1u);
      backing.DEF_currState_4_EQ_3___d26 = DEF_currState_4_EQ_3___d26;
      vcd_write_val(sim_hdl, num++, DEF_currState_4_EQ_4___d32, 1u);
      backing.DEF_currState_4_EQ_4___d32 = DEF_currState_4_EQ_4___d32;
      vcd_write_val(sim_hdl, num++, DEF_currState__h1663, 3u);
      backing.DEF_currState__h1663 = DEF_currState__h1663;
      vcd_write_val(sim_hdl, num++, DEF_d__h1665, 256u);
      backing.DEF_d__h1665 = DEF_d__h1665;
      vcd_write_val(sim_hdl, num++, DEF_rep_d__h1875, 256u);
      backing.DEF_rep_d__h1875 = DEF_rep_d__h1875;
      vcd_write_val(sim_hdl, num++, DEF_rowMask_3_BITS_251_TO_0___d88, 252u);
      backing.DEF_rowMask_3_BITS_251_TO_0___d88 = DEF_rowMask_3_BITS_251_TO_0___d88;
      vcd_write_val(sim_hdl, num++, DEF_rowMask__h47581, 256u);
      backing.DEF_rowMask__h47581 = DEF_rowMask__h47581;
      vcd_write_val(sim_hdl, num++, DEF_stallCounter_EQ_0___d8, 1u);
      backing.DEF_stallCounter_EQ_0___d8 = DEF_stallCounter_EQ_0___d8;
      vcd_write_val(sim_hdl, num++, DEF_x__h1499, 14u);
      backing.DEF_x__h1499 = DEF_x__h1499;
      vcd_write_val(sim_hdl, num++, DEF_x__h1525, 256u);
      backing.DEF_x__h1525 = DEF_x__h1525;
      vcd_write_val(sim_hdl, num++, DEF_x__h1650, 14u);
      backing.DEF_x__h1650 = DEF_x__h1650;
      vcd_write_val(sim_hdl, num++, DEF_x__h1885, 256u);
      backing.DEF_x__h1885 = DEF_x__h1885;
      vcd_write_val(sim_hdl, num++, DEF_x__h1904, 256u);
      backing.DEF_x__h1904 = DEF_x__h1904;
      vcd_write_val(sim_hdl, num++, DEF_x__h1938, 256u);
      backing.DEF_x__h1938 = DEF_x__h1938;
      vcd_write_val(sim_hdl, num++, DEF_x__h1954, 256u);
      backing.DEF_x__h1954 = DEF_x__h1954;
      vcd_write_val(sim_hdl, num++, DEF_x__h47591, 14u);
      backing.DEF_x__h47591 = DEF_x__h47591;
      vcd_write_val(sim_hdl, num++, DEF_y__h1905, 256u);
      backing.DEF_y__h1905 = DEF_y__h1905;
      vcd_write_val(sim_hdl, num++, DEF_y__h1939, 256u);
      backing.DEF_y__h1939 = DEF_y__h1939;
    }
}

void MOD_mkDRAM_Bank::vcd_prims(tVCDDumpType dt, MOD_mkDRAM_Bank &backing)
{
  INST_activeRowAddr.dump_VCD(dt, backing.INST_activeRowAddr);
  INST_addrQ.dump_VCD(dt, backing.INST_addrQ);
  INST_burstCounter.dump_VCD(dt, backing.INST_burstCounter);
  INST_cmdQ.dump_VCD(dt, backing.INST_cmdQ);
  INST_currAddress.dump_VCD(dt, backing.INST_currAddress);
  INST_currColAddr.dump_VCD(dt, backing.INST_currColAddr);
  INST_currCommand.dump_VCD(dt, backing.INST_currCommand);
  INST_currState.dump_VCD(dt, backing.INST_currState);
  INST_dataQ.dump_VCD(dt, backing.INST_dataQ);
  INST_mem_cells_mem_bank.dump_VCD(dt, backing.INST_mem_cells_mem_bank);
  INST_outputDataBuff.dump_VCD(dt, backing.INST_outputDataBuff);
  INST_rowBuffer.dump_VCD(dt, backing.INST_rowBuffer);
  INST_rowMask.dump_VCD(dt, backing.INST_rowMask);
  INST_stallCounter.dump_VCD(dt, backing.INST_stallCounter);
}
