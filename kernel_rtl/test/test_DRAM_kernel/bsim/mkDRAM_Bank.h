/*
 * Generated by Bluespec Compiler (build e4c11968)
 * 
 * On Wed Sep  4 18:43:50 PDT 2024
 * 
 */

/* Generation options: */
#ifndef __mkDRAM_Bank_h__
#define __mkDRAM_Bank_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkDRAM_Bank module */
class MOD_mkDRAM_Bank : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_activeRowAddr;
  MOD_Fifo<tUInt32> INST_addrQ;
  MOD_Reg<tUInt32> INST_burstCounter;
  MOD_Fifo<tUInt8> INST_cmdQ;
  MOD_Reg<tUInt32> INST_currAddress;
  MOD_Reg<tUInt32> INST_currColAddr;
  MOD_Reg<tUInt8> INST_currCommand;
  MOD_Reg<tUInt8> INST_currState;
  MOD_Fifo<tUInt8> INST_dataQ;
  MOD_BRAM<tUInt32,tUWide,tUInt8> INST_mem_cells_mem_bank;
  MOD_Fifo<tUInt8> INST_outputDataBuff;
  MOD_Reg<tUWide> INST_rowBuffer;
  MOD_Reg<tUWide> INST_rowMask;
  MOD_Reg<tUInt32> INST_stallCounter;
 
 /* Constructor */
 public:
  MOD_mkDRAM_Bank(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_burstCounter_7_ULT_4___d28;
  tUInt8 DEF_currState__h1663;
  tUInt32 DEF_x__h47591;
  tUInt32 DEF_x__h1650;
  tUInt8 DEF_currState_4_EQ_1___d25;
  tUInt8 DEF_currState_4_EQ_3___d26;
  tUInt8 DEF_stallCounter_EQ_0___d8;
  tUInt8 DEF_currState_4_EQ_4___d32;
  tUInt8 DEF_NOT_currState_4_EQ_4_2___d33;
  tUInt8 DEF_NOT_burstCounter_7_ULT_4_8___d29;
 
 /* Local definitions */
 private:
  tUWide DEF_d__h1665;
  tUWide DEF_rowMask__h47581;
  tUWide DEF_x__h1938;
  tUInt32 DEF_x__h1499;
  tUInt32 DEF_addr__h1199;
  tUWide DEF_rowMask_3_BITS_251_TO_0___d88;
  tUWide DEF_IF_currState_4_EQ_1_5_THEN_mem_cells_mem_bank__ETC___d58;
  tUWide DEF_x__h1885;
  tUWide DEF_y__h1939;
  tUWide DEF_x__h1525;
  tUWide DEF_rep_d__h1875;
  tUWide DEF__0_CONCAT_dataQ_first__6___d47;
  tUWide DEF_x__h1904;
  tUWide DEF_y__h1905;
  tUWide DEF_x__h1954;
 
 /* Rules */
 public:
  void RL_fetch();
  void RL_process_ACT();
  void RL_process_PRE();
  void RL_process_RD();
  void RL_process_WR();
  void RL_process_NOP();
 
 /* Methods */
 public:
  void METH_put_bank_cmd(tUInt8 ARG_put_bank_cmd_cmd, tUInt32 ARG_put_bank_cmd_addr);
  tUInt8 METH_RDY_put_bank_cmd();
  void METH_put_bank_data(tUInt8 ARG_put_bank_data_data);
  tUInt8 METH_RDY_put_bank_data();
  tUInt8 METH_data_response_ready();
  tUInt8 METH_RDY_data_response_ready();
  tUInt8 METH_get_data_response();
  tUInt8 METH_RDY_get_data_response();
  tUInt32 METH_get_active_row();
  tUInt8 METH_RDY_get_active_row();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDRAM_Bank &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDRAM_Bank &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDRAM_Bank &backing);
};

#endif /* ifndef __mkDRAM_Bank_h__ */
